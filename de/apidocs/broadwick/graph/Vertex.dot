#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Trebuchet MS",fontsize=10,labelfontname="Trebuchet MS",labelfontsize=10];
	node [fontname="Trebuchet MS",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// broadwick.graph.algorithms.ShortestPath<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c26650 [label=<<table title="broadwick.graph.algorithms.ShortestPath" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./algorithms/ShortestPath.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> ShortestPath&lt;V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge&lt;V&gt;&gt; </font></td></tr>
<tr><td align="center" balign="center"><font face="Trebuchet MS" point-size="7.0"> broadwick.graph.algorithms </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - jungGraph : edu.uci.ics.jung.graph.AbstractTypedGraph&lt;V, E&gt; </td></tr>
<tr><td align="left" balign="left"> - weightTransformer : org.apache.commons.collections15.Transformer&lt;E, java.lang.Number&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ShortestPath(graph : broadwick.graph.Graph&lt;V, E&gt;) </td></tr>
<tr><td align="left" balign="left"> + calculateDistance(source : V, target : V) : double </td></tr>
<tr><td align="left" balign="left"> + getEdgesInPath(source : V, target : V) : java.util.List&lt;E&gt; </td></tr>
		</table></td></tr>
		</table>>, URL="./algorithms/ShortestPath.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.graph.VertexAttribute
	c26651 [label=<<table title="broadwick.graph.VertexAttribute" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./VertexAttribute.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> VertexAttribute </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - name : String </td></tr>
<tr><td align="left" balign="left"> - type : Class&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> - defaultValue : Object </td></tr>
<tr><td align="left" balign="left"> - value : Object </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + VertexAttribute(name : String, type : Class&lt;&gt;, defaultValue : Object) </td></tr>
		</table></td></tr>
		</table>>, URL="./VertexAttribute.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.graph.Vertex
	c26652 [label=<<table title="broadwick.graph.Vertex" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./Vertex.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> Vertex </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # id : String </td></tr>
<tr><td align="left" balign="left"> # xCoord : double </td></tr>
<tr><td align="left" balign="left"> # yCoord : double </td></tr>
<tr><td align="left" balign="left"> - attributes : Collection&lt;VertexAttribute&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Vertex(id : String) </td></tr>
<tr><td align="left" balign="left"> + getAttributeByName(attributeName : String) : VertexAttribute </td></tr>
<tr><td align="left" balign="left"> + addAttribute(attribute : VertexAttribute) : boolean </td></tr>
<tr><td align="left" balign="left"> + setXCoord(x : double) </td></tr>
<tr><td align="left" balign="left"> + setYCoord(y : double) </td></tr>
<tr><td align="left" balign="left"> # finalize() </td></tr>
		</table></td></tr>
		</table>>, URL="./Vertex.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.graph.UndirectedGraph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c26653 [label=<<table title="broadwick.graph.UndirectedGraph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./UndirectedGraph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> UndirectedGraph&lt;V extends Vertex, E extends Edge&lt;V&gt;&gt; </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - vertexAttributes : Collection&lt;VertexAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> - edgeAttributes : Collection&lt;EdgeAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> - graph : UndirectedSparseMultigraph&lt;V, E&gt; </td></tr>
<tr><td align="left" balign="left"> - vertexmaps : HashMap&lt;String, V&gt; </td></tr>
<tr><td align="left" balign="left"> - edgemaps : HashMap&lt;String, E&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + UndirectedGraph() </td></tr>
<tr><td align="left" balign="left"> + getInEdges(vertex : V) : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getOutEdges(vertex : V) : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getPredecessors(vertex : V) : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + getSuccessors(vertex : V) : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + inDegree(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + outDegree(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + isPredecessor(v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + isSuccessor(v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + getPredecessorCount(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + getSuccessorCount(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + getSource(directedEdge : E) : V </td></tr>
<tr><td align="left" balign="left"> + getDest(directedEdge : E) : V </td></tr>
<tr><td align="left" balign="left"> + isSource(vertex : V, edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + isDest(vertex : V, edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + addVertex(vertex : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + addEdge(e : E, v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + addEdge(e : E, v1 : V, v2 : V, edgeType : EdgeType) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEndpoints(edge : E) : Pair&lt;V, V&gt; </td></tr>
<tr><td align="left" balign="left"> + getOpposite(vertex : V, edge : E) : V </td></tr>
<tr><td align="left" balign="left"> + getVertexCount() : int </td></tr>
<tr><td align="left" balign="left"> + getVertices() : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + getVertex(id : String) : V </td></tr>
<tr><td align="left" balign="left"> + getEdge(id : String) : E </td></tr>
<tr><td align="left" balign="left"> + getEdges() : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + removeVertex(vertex : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + removeEdge(edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEdgeType() : EdgeType </td></tr>
<tr><td align="left" balign="left"> + addVertexAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </td></tr>
<tr><td align="left" balign="left"> + addEdgeAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </td></tr>
<tr><td align="left" balign="left"> # finalize() </td></tr>
		</table></td></tr>
		</table>>, URL="./UndirectedGraph.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.graph.Tree<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c26654 [label=<<table title="broadwick.graph.Tree" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Tree.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> Tree&lt;V extends Vertex, E extends Edge&lt;V&gt;&gt; </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - vertexAttributes : Collection&lt;VertexAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> - edgeAttributes : Collection&lt;EdgeAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> - tree : DelegateTree&lt;V, E&gt; </td></tr>
<tr><td align="left" balign="left"> - vertexmaps : HashMap&lt;String, V&gt; </td></tr>
<tr><td align="left" balign="left"> - edgemaps : HashMap&lt;String, E&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Tree() </td></tr>
<tr><td align="left" balign="left"> + getRoot() : V </td></tr>
<tr><td align="left" balign="left"> + getHeight() : int </td></tr>
<tr><td align="left" balign="left"> + getDepth(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + addVertex(vertex : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + getSubTree(vertex : V) : Tree&lt;V, E&gt; </td></tr>
<tr><td align="left" balign="left"> + getInEdges(vertex : V) : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getOutEdges(vertex : V) : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getPredecessors(vertex : V) : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + getSuccessors(vertex : V) : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + inDegree(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + outDegree(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + isPredecessor(v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + isSuccessor(v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + getPredecessorCount(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + getSuccessorCount(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + getSource(directedEdge : E) : V </td></tr>
<tr><td align="left" balign="left"> + getDest(directedEdge : E) : V </td></tr>
<tr><td align="left" balign="left"> + isSource(vertex : V, edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + isDest(vertex : V, edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + addEdge(e : E, v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + addEdge(e : E, v1 : V, v2 : V, edgeType : EdgeType) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEndpoints(edge : E) : Pair&lt;V, V&gt; </td></tr>
<tr><td align="left" balign="left"> + getOpposite(vertex : V, edge : E) : V </td></tr>
<tr><td align="left" balign="left"> + getVertexCount() : int </td></tr>
<tr><td align="left" balign="left"> + getVertex(id : String) : V </td></tr>
<tr><td align="left" balign="left"> + getVertices() : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdge(id : String) : E </td></tr>
<tr><td align="left" balign="left"> + getEdges() : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getPredecessor(vertex : V) : V </td></tr>
<tr><td align="left" balign="left"> + removeVertex(vertex : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + removeEdge(edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + addSubtree(subtree : Tree&lt;V, E&gt;, node : V, connectingEdge : E) </td></tr>
<tr><td align="left" balign="left"> + getEdgeType() : EdgeType </td></tr>
<tr><td align="left" balign="left"> + addVertexAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </td></tr>
<tr><td align="left" balign="left"> + addEdgeAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </td></tr>
<tr><td align="left" balign="left"> # finalize() </td></tr>
		</table></td></tr>
		</table>>, URL="./Tree.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.graph.DirectedGraph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c26659 [label=<<table title="broadwick.graph.DirectedGraph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DirectedGraph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> DirectedGraph&lt;V extends Vertex, E extends Edge&lt;V&gt;&gt; </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - vertexAttributes : Collection&lt;VertexAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> - edgeAttributes : Collection&lt;EdgeAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> - graph : DirectedSparseMultigraph&lt;V, E&gt; </td></tr>
<tr><td align="left" balign="left"> - vertexmaps : HashMap&lt;String, V&gt; </td></tr>
<tr><td align="left" balign="left"> - edgemaps : HashMap&lt;String, E&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DirectedGraph() </td></tr>
<tr><td align="left" balign="left"> + getInEdges(vertex : V) : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getOutEdges(vertex : V) : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getPredecessors(vertex : V) : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + getSuccessors(vertex : V) : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + inDegree(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + outDegree(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + isPredecessor(v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + isSuccessor(v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + getPredecessorCount(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + getSuccessorCount(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + getSource(directedEdge : E) : V </td></tr>
<tr><td align="left" balign="left"> + getDest(directedEdge : E) : V </td></tr>
<tr><td align="left" balign="left"> + isSource(vertex : V, edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + isDest(vertex : V, edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + addVertex(vertex : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + addEdge(e : E, v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + addEdge(e : E, v1 : V, v2 : V, edgeType : EdgeType) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEndpoints(edge : E) : Pair&lt;V, V&gt; </td></tr>
<tr><td align="left" balign="left"> + getOpposite(vertex : V, edge : E) : V </td></tr>
<tr><td align="left" balign="left"> + getVertexCount() : int </td></tr>
<tr><td align="left" balign="left"> + getVertices() : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + getVertex(id : String) : V </td></tr>
<tr><td align="left" balign="left"> + getEdge(id : String) : E </td></tr>
<tr><td align="left" balign="left"> + getEdges() : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + removeVertex(vertex : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + removeEdge(edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEdgeType() : EdgeType </td></tr>
<tr><td align="left" balign="left"> + addVertexAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </td></tr>
<tr><td align="left" balign="left"> + addEdgeAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </td></tr>
<tr><td align="left" balign="left"> # finalize() </td></tr>
		</table></td></tr>
		</table>>, URL="./DirectedGraph.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.graph.DepthFirstIterator<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c26660 [label=<<table title="broadwick.graph.DepthFirstIterator" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DepthFirstIterator.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> DepthFirstIterator&lt;V extends Vertex, E extends Edge&lt;V&gt;&gt; </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - vertexList : List&lt;V&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DepthFirstIterator(tree : Tree&lt;V, E&gt;) </td></tr>
<tr><td align="left" balign="left"> + hasNext() : boolean </td></tr>
<tr><td align="left" balign="left"> + next() : V </td></tr>
<tr><td align="left" balign="left"> + remove() </td></tr>
<tr><td align="left" balign="left"> - traverseTree(tree : Tree&lt;V, E&gt;) </td></tr>
		</table></td></tr>
		</table>>, URL="./DepthFirstIterator.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.graph.writer.GraphMl
	c26663 [label=<<table title="broadwick.graph.writer.GraphMl" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./writer/GraphMl.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> GraphMl </font></td></tr>
<tr><td align="center" balign="center"><font face="Trebuchet MS" point-size="7.0"> broadwick.graph.writer </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - GraphMl() </td></tr>
<tr><td align="left" balign="left"> + toString(network : broadwick.graph.Graph&lt;?, ?&gt;, directed : boolean) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + toString(network : broadwick.graph.Graph&lt;?, ?&gt;) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + save(file : java.lang.String, network : broadwick.graph.Graph&lt;?, ?&gt;) </td></tr>
<tr><td align="left" balign="left"> - addEdge(edge : broadwick.graph.Edge&lt;&gt;, element : org.jdom2.Element) </td></tr>
<tr><td align="left" balign="left"> - addNode(vertex : broadwick.graph.Vertex, element : org.jdom2.Element) </td></tr>
		</table></td></tr>
		</table>>, URL="./writer/GraphMl.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.phylo.PhyloNode
	c26702 [label=<<table title="broadwick.phylo.PhyloNode" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../phylo/PhyloNode.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> PhyloNode </font></td></tr>
<tr><td align="center" balign="center"><font face="Trebuchet MS" point-size="7.0"> broadwick.phylo </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - distance : double </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + PhyloNode(name : java.lang.String, distance : double) </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + equals(other : java.lang.Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
		</table></td></tr>
		</table>>, URL="../phylo/PhyloNode.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	//broadwick.phylo.PhyloNode extends broadwick.graph.Vertex
	c26652:p -> c26702:p [dir=back,arrowtail=empty];
	// broadwick.graph.Vertex NAVASSOC broadwick.graph.VertexAttribute
	c26652:p -> c26651:p [taillabel="", label="", headlabel="*", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// broadwick.graph.UndirectedGraph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> NAVASSOC broadwick.graph.VertexAttribute
	c26653:p -> c26651:p [taillabel="", label="", headlabel="*", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// broadwick.graph.UndirectedGraph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> NAVASSOC broadwick.graph.Vertex
	c26653:p -> c26652:p [taillabel="", label="", headlabel="*", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// broadwick.graph.Tree<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> NAVASSOC broadwick.graph.VertexAttribute
	c26654:p -> c26651:p [taillabel="", label="", headlabel="*", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// broadwick.graph.Tree<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> NAVASSOC broadwick.graph.Vertex
	c26654:p -> c26652:p [taillabel="", label="", headlabel="*", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// broadwick.graph.DirectedGraph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> NAVASSOC broadwick.graph.VertexAttribute
	c26659:p -> c26651:p [taillabel="", label="", headlabel="*", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// broadwick.graph.DirectedGraph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> NAVASSOC broadwick.graph.Vertex
	c26659:p -> c26652:p [taillabel="", label="", headlabel="*", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// broadwick.graph.DepthFirstIterator<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> NAVASSOC broadwick.graph.Vertex
	c26660:p -> c26652:p [taillabel="", label="", headlabel="*", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// broadwick.graph.algorithms.ShortestPath<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> DEPEND broadwick.graph.Vertex
	c26650:p -> c26652:p [taillabel="", label="", headlabel="", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// broadwick.graph.writer.GraphMl DEPEND broadwick.graph.Vertex
	c26663:p -> c26652:p [taillabel="", label="", headlabel="", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
}

