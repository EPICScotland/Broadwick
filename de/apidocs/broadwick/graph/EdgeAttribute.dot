#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Trebuchet MS",fontsize=10,labelfontname="Trebuchet MS",labelfontsize=10];
	node [fontname="Trebuchet MS",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// broadwick.graph.UndirectedGraph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c11732 [label=<<table title="broadwick.graph.UndirectedGraph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./UndirectedGraph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> UndirectedGraph&lt;V extends Vertex, E extends Edge&lt;V&gt;&gt; </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - vertexAttributes : Collection&lt;VertexAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> - edgeAttributes : Collection&lt;EdgeAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> - graph : UndirectedSparseMultigraph&lt;V, E&gt; </td></tr>
<tr><td align="left" balign="left"> - vertexmaps : HashMap&lt;String, V&gt; </td></tr>
<tr><td align="left" balign="left"> - edgemaps : HashMap&lt;String, E&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + UndirectedGraph() </td></tr>
<tr><td align="left" balign="left"> + getInEdges(vertex : V) : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getOutEdges(vertex : V) : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getPredecessors(vertex : V) : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + getSuccessors(vertex : V) : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + inDegree(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + outDegree(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + isPredecessor(v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + isSuccessor(v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + getPredecessorCount(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + getSuccessorCount(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + getSource(directedEdge : E) : V </td></tr>
<tr><td align="left" balign="left"> + getDest(directedEdge : E) : V </td></tr>
<tr><td align="left" balign="left"> + isSource(vertex : V, edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + isDest(vertex : V, edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + addVertex(vertex : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + addEdge(e : E, v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + addEdge(e : E, v1 : V, v2 : V, edgeType : EdgeType) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEndpoints(edge : E) : Pair&lt;V, V&gt; </td></tr>
<tr><td align="left" balign="left"> + getOpposite(vertex : V, edge : E) : V </td></tr>
<tr><td align="left" balign="left"> + getVertexCount() : int </td></tr>
<tr><td align="left" balign="left"> + getVertices() : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + getVertex(id : String) : V </td></tr>
<tr><td align="left" balign="left"> + getEdge(id : String) : E </td></tr>
<tr><td align="left" balign="left"> + getEdges() : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + removeVertex(vertex : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + removeEdge(edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEdgeType() : EdgeType </td></tr>
<tr><td align="left" balign="left"> + addVertexAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </td></tr>
<tr><td align="left" balign="left"> + addEdgeAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </td></tr>
<tr><td align="left" balign="left"> # finalize() </td></tr>
		</table></td></tr>
		</table>>, URL="./UndirectedGraph.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.graph.Tree<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c11733 [label=<<table title="broadwick.graph.Tree" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Tree.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> Tree&lt;V extends Vertex, E extends Edge&lt;V&gt;&gt; </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - vertexAttributes : Collection&lt;VertexAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> - edgeAttributes : Collection&lt;EdgeAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> - tree : DelegateTree&lt;V, E&gt; </td></tr>
<tr><td align="left" balign="left"> - vertexmaps : HashMap&lt;String, V&gt; </td></tr>
<tr><td align="left" balign="left"> - edgemaps : HashMap&lt;String, E&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Tree() </td></tr>
<tr><td align="left" balign="left"> + getRoot() : V </td></tr>
<tr><td align="left" balign="left"> + getHeight() : int </td></tr>
<tr><td align="left" balign="left"> + getDepth(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + addVertex(vertex : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + getSubTree(vertex : V) : Tree&lt;V, E&gt; </td></tr>
<tr><td align="left" balign="left"> + getInEdges(vertex : V) : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getOutEdges(vertex : V) : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getPredecessors(vertex : V) : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + getSuccessors(vertex : V) : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + inDegree(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + outDegree(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + isPredecessor(v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + isSuccessor(v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + getPredecessorCount(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + getSuccessorCount(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + getSource(directedEdge : E) : V </td></tr>
<tr><td align="left" balign="left"> + getDest(directedEdge : E) : V </td></tr>
<tr><td align="left" balign="left"> + isSource(vertex : V, edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + isDest(vertex : V, edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + addEdge(e : E, v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + addEdge(e : E, v1 : V, v2 : V, edgeType : EdgeType) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEndpoints(edge : E) : Pair&lt;V, V&gt; </td></tr>
<tr><td align="left" balign="left"> + getOpposite(vertex : V, edge : E) : V </td></tr>
<tr><td align="left" balign="left"> + getVertexCount() : int </td></tr>
<tr><td align="left" balign="left"> + getVertex(id : String) : V </td></tr>
<tr><td align="left" balign="left"> + getVertices() : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdge(id : String) : E </td></tr>
<tr><td align="left" balign="left"> + getEdges() : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getPredecessor(vertex : V) : V </td></tr>
<tr><td align="left" balign="left"> + removeVertex(vertex : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + removeEdge(edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + addSubtree(subtree : Tree&lt;V, E&gt;, node : V, connectingEdge : E) </td></tr>
<tr><td align="left" balign="left"> + getEdgeType() : EdgeType </td></tr>
<tr><td align="left" balign="left"> + addVertexAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </td></tr>
<tr><td align="left" balign="left"> + addEdgeAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </td></tr>
<tr><td align="left" balign="left"> # finalize() </td></tr>
		</table></td></tr>
		</table>>, URL="./Tree.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.graph.EdgeAttribute
	c11736 [label=<<table title="broadwick.graph.EdgeAttribute" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./EdgeAttribute.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> EdgeAttribute </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - name : String </td></tr>
<tr><td align="left" balign="left"> - type : Class&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> - defaultValue : String </td></tr>
<tr><td align="left" balign="left"> - value : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EdgeAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </td></tr>
		</table></td></tr>
		</table>>, URL="./EdgeAttribute.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.graph.Edge<V extends broadwick.graph.Vertex>
	c11737 [label=<<table title="broadwick.graph.Edge" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Edge.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> Edge&lt;V extends Vertex&gt; </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # id : String </td></tr>
<tr><td align="left" balign="left"> # source : V </td></tr>
<tr><td align="left" balign="left"> # destination : V </td></tr>
<tr><td align="left" balign="left"> # weight : Double </td></tr>
<tr><td align="left" balign="left"> - attributes : Collection&lt;EdgeAttribute&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Edge(id : String) </td></tr>
<tr><td align="left" balign="left"> + Edge(id : String, source : V, destination : V) </td></tr>
<tr><td align="left" balign="left"> + Edge(source : V, destination : V) </td></tr>
<tr><td align="left" balign="left"> + Edge(source : V, destination : V, weight : Double) </td></tr>
<tr><td align="left" balign="left"> + Edge(id : String, source : V, destination : V, weight : Double) </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + getAttributeByName(attributeName : String) : EdgeAttribute </td></tr>
<tr><td align="left" balign="left"> + addAttribute(attribute : EdgeAttribute) : boolean </td></tr>
<tr><td align="left" balign="left"> # finalize() </td></tr>
		</table></td></tr>
		</table>>, URL="./Edge.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.graph.DirectedGraph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c11738 [label=<<table title="broadwick.graph.DirectedGraph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DirectedGraph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> DirectedGraph&lt;V extends Vertex, E extends Edge&lt;V&gt;&gt; </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - vertexAttributes : Collection&lt;VertexAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> - edgeAttributes : Collection&lt;EdgeAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> - graph : DirectedSparseMultigraph&lt;V, E&gt; </td></tr>
<tr><td align="left" balign="left"> - vertexmaps : HashMap&lt;String, V&gt; </td></tr>
<tr><td align="left" balign="left"> - edgemaps : HashMap&lt;String, E&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DirectedGraph() </td></tr>
<tr><td align="left" balign="left"> + getInEdges(vertex : V) : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getOutEdges(vertex : V) : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getPredecessors(vertex : V) : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + getSuccessors(vertex : V) : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + inDegree(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + outDegree(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + isPredecessor(v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + isSuccessor(v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + getPredecessorCount(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + getSuccessorCount(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + getSource(directedEdge : E) : V </td></tr>
<tr><td align="left" balign="left"> + getDest(directedEdge : E) : V </td></tr>
<tr><td align="left" balign="left"> + isSource(vertex : V, edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + isDest(vertex : V, edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + addVertex(vertex : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + addEdge(e : E, v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + addEdge(e : E, v1 : V, v2 : V, edgeType : EdgeType) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEndpoints(edge : E) : Pair&lt;V, V&gt; </td></tr>
<tr><td align="left" balign="left"> + getOpposite(vertex : V, edge : E) : V </td></tr>
<tr><td align="left" balign="left"> + getVertexCount() : int </td></tr>
<tr><td align="left" balign="left"> + getVertices() : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + getVertex(id : String) : V </td></tr>
<tr><td align="left" balign="left"> + getEdge(id : String) : E </td></tr>
<tr><td align="left" balign="left"> + getEdges() : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + removeVertex(vertex : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + removeEdge(edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEdgeType() : EdgeType </td></tr>
<tr><td align="left" balign="left"> + addVertexAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </td></tr>
<tr><td align="left" balign="left"> + addEdgeAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </td></tr>
<tr><td align="left" balign="left"> # finalize() </td></tr>
		</table></td></tr>
		</table>>, URL="./DirectedGraph.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.graph.UndirectedGraph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> NAVASSOC broadwick.graph.EdgeAttribute
	c11732:p -> c11736:p [taillabel="", label="", headlabel="*", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// broadwick.graph.UndirectedGraph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> NAVASSOC broadwick.graph.Edge<V extends broadwick.graph.Vertex>
	c11732:p -> c11737:p [taillabel="", label="", headlabel="*", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// broadwick.graph.Tree<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> NAVASSOC broadwick.graph.EdgeAttribute
	c11733:p -> c11736:p [taillabel="", label="", headlabel="*", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// broadwick.graph.Tree<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> NAVASSOC broadwick.graph.Edge<V extends broadwick.graph.Vertex>
	c11733:p -> c11737:p [taillabel="", label="", headlabel="*", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// broadwick.graph.Edge<V extends broadwick.graph.Vertex> NAVASSOC broadwick.graph.EdgeAttribute
	c11737:p -> c11736:p [taillabel="", label="", headlabel="*", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// broadwick.graph.DirectedGraph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> NAVASSOC broadwick.graph.EdgeAttribute
	c11738:p -> c11736:p [taillabel="", label="", headlabel="*", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// broadwick.graph.DirectedGraph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> NAVASSOC broadwick.graph.Edge<V extends broadwick.graph.Vertex>
	c11738:p -> c11737:p [taillabel="", label="", headlabel="*", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
}

