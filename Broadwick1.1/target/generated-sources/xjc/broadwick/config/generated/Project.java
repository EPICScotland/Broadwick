//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.02.14 at 11:49:10 AM GMT 
//


package broadwick.config.generated;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Copyable;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.builder.CopyBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBCopyBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBEqualsBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBHashCodeBuilder;
import org.jvnet.jaxb2_commons.lang.builder.JAXBToStringBuilder;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="logs" type="{}Logs" minOccurs="0"/>
 *         &lt;element name="data">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;choice minOccurs="0">
 *                   &lt;element name="datafiles" type="{}DataFiles"/>
 *                   &lt;element name="databases" type="{}Databases"/>
 *                 &lt;/choice>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="models" type="{}Models"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "logs",
    "data",
    "models"
})
@XmlRootElement(name = "project")
public class Project
    implements CopyTo, Copyable, Equals, HashCode, ToString
{

    protected Logs logs;
    @XmlElement(required = true)
    protected Project.Data data;
    @XmlElement(required = true)
    protected Models models;

    /**
     * Gets the value of the logs property.
     * 
     * @return
     *     possible object is
     *     {@link Logs }
     *     
     */
    public Logs getLogs() {
        return logs;
    }

    /**
     * Sets the value of the logs property.
     * 
     * @param value
     *     allowed object is
     *     {@link Logs }
     *     
     */
    public void setLogs(Logs value) {
        this.logs = value;
    }

    /**
     * Gets the value of the data property.
     * 
     * @return
     *     possible object is
     *     {@link Project.Data }
     *     
     */
    public Project.Data getData() {
        return data;
    }

    /**
     * Sets the value of the data property.
     * 
     * @param value
     *     allowed object is
     *     {@link Project.Data }
     *     
     */
    public void setData(Project.Data value) {
        this.data = value;
    }

    /**
     * Gets the value of the models property.
     * 
     * @return
     *     possible object is
     *     {@link Models }
     *     
     */
    public Models getModels() {
        return models;
    }

    /**
     * Sets the value of the models property.
     * 
     * @param value
     *     allowed object is
     *     {@link Models }
     *     
     */
    public void setModels(Models value) {
        this.models = value;
    }

    public void toString(ToStringBuilder toStringBuilder) {
        {
            Logs theLogs;
            theLogs = this.getLogs();
            toStringBuilder.append("logs", theLogs);
        }
        {
            Project.Data theData;
            theData = this.getData();
            toStringBuilder.append("data", theData);
        }
        {
            Models theModels;
            theModels = this.getModels();
            toStringBuilder.append("models", theModels);
        }
    }

    public String toString() {
        final ToStringBuilder toStringBuilder = new JAXBToStringBuilder(this);
        toString(toStringBuilder);
        return toStringBuilder.toString();
    }

    public void equals(Object object, EqualsBuilder equalsBuilder) {
        if (!(object instanceof Project)) {
            equalsBuilder.appendSuper(false);
            return ;
        }
        if (this == object) {
            return ;
        }
        final Project that = ((Project) object);
        equalsBuilder.append(this.getLogs(), that.getLogs());
        equalsBuilder.append(this.getData(), that.getData());
        equalsBuilder.append(this.getModels(), that.getModels());
    }

    public boolean equals(Object object) {
        if (!(object instanceof Project)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final EqualsBuilder equalsBuilder = new JAXBEqualsBuilder();
        equals(object, equalsBuilder);
        return equalsBuilder.isEquals();
    }

    public void hashCode(HashCodeBuilder hashCodeBuilder) {
        hashCodeBuilder.append(this.getLogs());
        hashCodeBuilder.append(this.getData());
        hashCodeBuilder.append(this.getModels());
    }

    public int hashCode() {
        final HashCodeBuilder hashCodeBuilder = new JAXBHashCodeBuilder();
        hashCode(hashCodeBuilder);
        return hashCodeBuilder.toHashCode();
    }

    public Object copyTo(Object target, CopyBuilder copyBuilder) {
        final Project copy = ((target == null)?new Project():((Project) target));
        {
            Logs sourceLogs;
            sourceLogs = this.getLogs();
            Logs copyLogs = ((Logs) copyBuilder.copy(sourceLogs));
            copy.setLogs(copyLogs);
        }
        {
            Project.Data sourceData;
            sourceData = this.getData();
            Project.Data copyData = ((Project.Data) copyBuilder.copy(sourceData));
            copy.setData(copyData);
        }
        {
            Models sourceModels;
            sourceModels = this.getModels();
            Models copyModels = ((Models) copyBuilder.copy(sourceModels));
            copy.setModels(copyModels);
        }
        return copy;
    }

    public Object copyTo(Object target) {
        final CopyBuilder copyBuilder = new JAXBCopyBuilder();
        return copyTo(target, copyBuilder);
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;choice minOccurs="0">
     *         &lt;element name="datafiles" type="{}DataFiles"/>
     *         &lt;element name="databases" type="{}Databases"/>
     *       &lt;/choice>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "datafiles",
        "databases"
    })
    public static class Data
        implements CopyTo, Copyable, Equals, HashCode, ToString
    {

        protected DataFiles datafiles;
        protected Databases databases;

        /**
         * Gets the value of the datafiles property.
         * 
         * @return
         *     possible object is
         *     {@link DataFiles }
         *     
         */
        public DataFiles getDatafiles() {
            return datafiles;
        }

        /**
         * Sets the value of the datafiles property.
         * 
         * @param value
         *     allowed object is
         *     {@link DataFiles }
         *     
         */
        public void setDatafiles(DataFiles value) {
            this.datafiles = value;
        }

        /**
         * Gets the value of the databases property.
         * 
         * @return
         *     possible object is
         *     {@link Databases }
         *     
         */
        public Databases getDatabases() {
            return databases;
        }

        /**
         * Sets the value of the databases property.
         * 
         * @param value
         *     allowed object is
         *     {@link Databases }
         *     
         */
        public void setDatabases(Databases value) {
            this.databases = value;
        }

        public void toString(ToStringBuilder toStringBuilder) {
            {
                DataFiles theDatafiles;
                theDatafiles = this.getDatafiles();
                toStringBuilder.append("datafiles", theDatafiles);
            }
            {
                Databases theDatabases;
                theDatabases = this.getDatabases();
                toStringBuilder.append("databases", theDatabases);
            }
        }

        public String toString() {
            final ToStringBuilder toStringBuilder = new JAXBToStringBuilder(this);
            toString(toStringBuilder);
            return toStringBuilder.toString();
        }

        public void equals(Object object, EqualsBuilder equalsBuilder) {
            if (!(object instanceof Project.Data)) {
                equalsBuilder.appendSuper(false);
                return ;
            }
            if (this == object) {
                return ;
            }
            final Project.Data that = ((Project.Data) object);
            equalsBuilder.append(this.getDatafiles(), that.getDatafiles());
            equalsBuilder.append(this.getDatabases(), that.getDatabases());
        }

        public boolean equals(Object object) {
            if (!(object instanceof Project.Data)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final EqualsBuilder equalsBuilder = new JAXBEqualsBuilder();
            equals(object, equalsBuilder);
            return equalsBuilder.isEquals();
        }

        public void hashCode(HashCodeBuilder hashCodeBuilder) {
            hashCodeBuilder.append(this.getDatafiles());
            hashCodeBuilder.append(this.getDatabases());
        }

        public int hashCode() {
            final HashCodeBuilder hashCodeBuilder = new JAXBHashCodeBuilder();
            hashCode(hashCodeBuilder);
            return hashCodeBuilder.toHashCode();
        }

        public Object copyTo(Object target, CopyBuilder copyBuilder) {
            final Project.Data copy = ((target == null)?new Project.Data():((Project.Data) target));
            {
                DataFiles sourceDatafiles;
                sourceDatafiles = this.getDatafiles();
                DataFiles copyDatafiles = ((DataFiles) copyBuilder.copy(sourceDatafiles));
                copy.setDatafiles(copyDatafiles);
            }
            {
                Databases sourceDatabases;
                sourceDatabases = this.getDatabases();
                Databases copyDatabases = ((Databases) copyBuilder.copy(sourceDatabases));
                copy.setDatabases(copyDatabases);
            }
            return copy;
        }

        public Object copyTo(Object target) {
            final CopyBuilder copyBuilder = new JAXBCopyBuilder();
            return copyTo(target, copyBuilder);
        }

    }

}
