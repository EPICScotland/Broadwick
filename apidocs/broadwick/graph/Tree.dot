#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Trebuchet MS",fontsize=10,labelfontname="Trebuchet MS",labelfontsize=10];
	node [fontname="Trebuchet MS",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// broadwick.graph.VertexAttribute
	c20702 [label=<<table title="broadwick.graph.VertexAttribute" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./VertexAttribute.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> VertexAttribute </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - name : String </td></tr>
<tr><td align="left" balign="left"> - type : Class&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> - defaultValue : Object </td></tr>
<tr><td align="left" balign="left"> - value : Object </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + VertexAttribute(name : String, type : Class&lt;&gt;, defaultValue : Object) </td></tr>
		</table></td></tr>
		</table>>, URL="./VertexAttribute.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.graph.Tree<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c20705 [label=<<table title="broadwick.graph.Tree" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./Tree.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> Tree&lt;V extends Vertex, E extends Edge&lt;V&gt;&gt; </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - vertexAttributes : Collection&lt;VertexAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> - edgeAttributes : Collection&lt;EdgeAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> - tree : DelegateTree&lt;V, E&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Tree() </td></tr>
<tr><td align="left" balign="left"> + getRoot() : V </td></tr>
<tr><td align="left" balign="left"> + getHeight() : int </td></tr>
<tr><td align="left" balign="left"> + getDepth(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + addVertex(vertex : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + getSubTree(vertex : V) : Tree&lt;V, E&gt; </td></tr>
<tr><td align="left" balign="left"> + getInEdges(vertex : V) : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getOutEdges(vertex : V) : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getPredecessors(vertex : V) : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + getSuccessors(vertex : V) : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + inDegree(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + outDegree(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + isPredecessor(v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + isSuccessor(v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + getPredecessorCount(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + getSuccessorCount(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + getSource(directedEdge : E) : V </td></tr>
<tr><td align="left" balign="left"> + getDest(directedEdge : E) : V </td></tr>
<tr><td align="left" balign="left"> + isSource(vertex : V, edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + isDest(vertex : V, edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + addEdge(e : E, v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + addEdge(e : E, v1 : V, v2 : V, edgeType : EdgeType) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEndpoints(edge : E) : Pair&lt;V, V&gt; </td></tr>
<tr><td align="left" balign="left"> + getOpposite(vertex : V, edge : E) : V </td></tr>
<tr><td align="left" balign="left"> + getVertexCount() : int </td></tr>
<tr><td align="left" balign="left"> + getVertices() : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdges() : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getPredecessor(vertex : V) : V </td></tr>
<tr><td align="left" balign="left"> + removeVertex(vertex : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + removeEdge(edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + addSubtree(subtree : Tree&lt;V, E&gt;, node : V, connectingEdge : E) </td></tr>
<tr><td align="left" balign="left"> + getEdgeType() : EdgeType </td></tr>
<tr><td align="left" balign="left"> + addVertexAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </td></tr>
<tr><td align="left" balign="left"> + addEdgeAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </td></tr>
		</table></td></tr>
		</table>>, URL="./Tree.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.graph.Graph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c20706 [label=<<table title="broadwick.graph.Graph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Graph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"><font face="Trebuchet MS"> Graph&lt;V extends Vertex, E extends Edge&lt;V&gt;&gt; </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getInEdges(vertex : V) : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getOutEdges(vertex : V) : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getPredecessors(vertex : V) : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + getSuccessors(vertex : V) : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + inDegree(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + outDegree(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + isPredecessor(v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + isSuccessor(v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + getPredecessorCount(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + getSuccessorCount(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + getSource(directedEdge : E) : V </td></tr>
<tr><td align="left" balign="left"> + getDest(directedEdge : E) : V </td></tr>
<tr><td align="left" balign="left"> + isSource(vertex : V, edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + isDest(vertex : V, edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + addVertex(vertex : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + addEdge(e : E, v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + addEdge(e : E, v1 : V, v2 : V, edgeType : EdgeType) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEndpoints(edge : E) : Pair&lt;V, V&gt; </td></tr>
<tr><td align="left" balign="left"> + getOpposite(vertex : V, edge : E) : V </td></tr>
<tr><td align="left" balign="left"> + getVertexCount() : int </td></tr>
<tr><td align="left" balign="left"> + getVertices() : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdges() : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + removeVertex(vertex : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + removeEdge(edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + getVertexAttributes() : Collection&lt;VertexAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdgeAttributes() : Collection&lt;EdgeAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> + addVertexAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </td></tr>
<tr><td align="left" balign="left"> + addEdgeAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </td></tr>
<tr><td align="left" balign="left"> + getEdgeType() : EdgeType </td></tr>
		</table></td></tr>
		</table>>, URL="./Graph.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.graph.EdgeAttribute
	c20708 [label=<<table title="broadwick.graph.EdgeAttribute" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./EdgeAttribute.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> EdgeAttribute </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - name : String </td></tr>
<tr><td align="left" balign="left"> - type : Class&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> - defaultValue : String </td></tr>
<tr><td align="left" balign="left"> - value : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EdgeAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </td></tr>
		</table></td></tr>
		</table>>, URL="./EdgeAttribute.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.phylo.NewickTreeParser
	c20742 [label=<<table title="broadwick.phylo.NewickTreeParser" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../phylo/NewickTreeParser.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> NewickTreeParser </font></td></tr>
<tr><td align="center" balign="center"><font face="Trebuchet MS" point-size="7.0"> broadwick.phylo </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - newickString : java.lang.String </td></tr>
<tr><td align="left" balign="left"> - branchLabel : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + NewickTreeParser(newickFile : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + NewickTreeParser() </td></tr>
<tr><td align="left" balign="left"> + parse(newickStr : java.lang.String) : broadwick.graph.Tree&lt;broadwick.phylo.PhyloNode, broadwick.graph.Edge&lt;broadwick.phylo.PhyloNode&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + parse() : broadwick.graph.Tree&lt;broadwick.phylo.PhyloNode, broadwick.graph.Edge&lt;broadwick.phylo.PhyloNode&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - parseString(stringToParse : java.lang.String, parent : broadwick.phylo.PhyloNode, tree : broadwick.graph.Tree&lt;broadwick.phylo.PhyloNode, broadwick.graph.Edge&lt;broadwick.phylo.PhyloNode&gt;&gt;) </td></tr>
<tr><td align="left" balign="left"> - findNodes(tree : java.lang.String) : java.util.Collection&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> - getClosingParenthesis(strng : java.lang.String) : int </td></tr>
<tr><td align="left" balign="left"> - parseNode(node : java.lang.String, tree : broadwick.graph.Tree&lt;broadwick.phylo.PhyloNode, broadwick.graph.Edge&lt;broadwick.phylo.PhyloNode&gt;&gt;, parent : broadwick.phylo.PhyloNode) </td></tr>
<tr><td align="left" balign="left"> - addNodeToTree(node : java.lang.String, tree : broadwick.graph.Tree&lt;broadwick.phylo.PhyloNode, broadwick.graph.Edge&lt;broadwick.phylo.PhyloNode&gt;&gt;, parent : broadwick.phylo.PhyloNode, createUniqueName : boolean) : broadwick.phylo.PhyloNode </td></tr>
		</table></td></tr>
		</table>>, URL="../phylo/NewickTreeParser.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.utils.Pair<A, B>
	c20766 [label=<<table title="broadwick.utils.Pair" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../utils/Pair.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> Pair&lt;A, B&gt; </font></td></tr>
<tr><td align="center" balign="center"><font face="Trebuchet MS" point-size="7.0"> broadwick.utils </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - first : A </td></tr>
<tr><td align="left" balign="left"> - second : B </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Pair(first : A, second : B) </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
		</table></td></tr>
		</table>>, URL="../utils/Pair.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	//broadwick.graph.Tree<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> implements broadwick.graph.Graph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c20706:p -> c20705:p [dir=back,arrowtail=empty,style=dashed];
	// broadwick.graph.Tree<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> NAVASSOC broadwick.graph.VertexAttribute
	c20705:p -> c20702:p [taillabel="", label="", headlabel="*", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// broadwick.graph.Tree<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> NAVASSOC broadwick.graph.EdgeAttribute
	c20705:p -> c20708:p [taillabel="", label="", headlabel="*", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// broadwick.graph.Tree<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> NAVASSOC edu.uci.ics.jung.graph.DelegateTree<V, E>
	c20705:p -> c20795:p [taillabel="", label="", headlabel="", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// broadwick.graph.Tree<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> DEPEND broadwick.utils.Pair<A, B>
	c20705:p -> c20766:p [taillabel="", label="", headlabel="", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// broadwick.graph.Graph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> DEPEND broadwick.utils.Pair<A, B>
	c20706:p -> c20766:p [taillabel="", label="", headlabel="", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// broadwick.phylo.NewickTreeParser DEPEND broadwick.graph.Tree<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c20742:p -> c20705:p [taillabel="", label="", headlabel="", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// broadwick.phylo.NewickTreeParser DEPEND broadwick.graph.Tree<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c20742:p -> c20705:p [taillabel="", label="", headlabel="", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// broadwick.phylo.NewickTreeParser DEPEND broadwick.graph.Tree<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c20742:p -> c20705:p [taillabel="", label="", headlabel="", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// broadwick.phylo.NewickTreeParser DEPEND broadwick.graph.Tree<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c20742:p -> c20705:p [taillabel="", label="", headlabel="", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// broadwick.phylo.NewickTreeParser DEPEND broadwick.graph.Tree<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c20742:p -> c20705:p [taillabel="", label="", headlabel="", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// edu.uci.ics.jung.graph.DelegateTree<V, E>
	c20795 [label=<<table title="edu.uci.ics.jung.graph.DelegateTree" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/edu/uci/ics/jung/graph/DelegateTree.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> DelegateTree&lt;V, E&gt; </font></td></tr>
<tr><td align="center" balign="center"><font face="Trebuchet MS" point-size="7.0"> edu.uci.ics.jung.graph </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # root : V </td></tr>
<tr><td align="left" balign="left"> # vertex_depths : java.util.Map&lt;V, java.lang.Integer&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DelegateTree() </td></tr>
<tr><td align="left" balign="left"> + DelegateTree(arg0 : org.apache.commons.collections15.Factory&lt;edu.uci.ics.jung.graph.DirectedGraph&lt;V, E&gt;&gt;) </td></tr>
<tr><td align="left" balign="left"> + DelegateTree(arg0 : edu.uci.ics.jung.graph.DirectedGraph&lt;V, E&gt;) </td></tr>
<tr><td align="left" balign="left"> + getFactory() : org.apache.commons.collections15.Factory&lt;edu.uci.ics.jung.graph.Tree&lt;V, E&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + addEdge(arg0 : E, arg1 : V, arg2 : V, arg3 : edu.uci.ics.jung.graph.util.EdgeType) : boolean </td></tr>
<tr><td align="left" balign="left"> + addEdge(arg0 : E, arg1 : V, arg2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + addVertex(arg0 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + removeVertex(arg0 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + addChild(arg0 : E, arg1 : V, arg2 : V, arg3 : edu.uci.ics.jung.graph.util.EdgeType) : boolean </td></tr>
<tr><td align="left" balign="left"> + addChild(arg0 : E, arg1 : V, arg2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + getChildCount(arg0 : V) : int </td></tr>
<tr><td align="left" balign="left"> + getChildren(arg0 : V) : java.util.Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + getParent(arg0 : V) : V </td></tr>
<tr><td align="left" balign="left"> + getPath(arg0 : V) : java.util.List&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + getRoot() : V </td></tr>
<tr><td align="left" balign="left"> + setRoot(arg0 : V) </td></tr>
<tr><td align="left" balign="left"> + removeChild(arg0 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + getDepth(arg0 : V) : int </td></tr>
<tr><td align="left" balign="left"> + getHeight() : int </td></tr>
<tr><td align="left" balign="left"> + isInternal(arg0 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + isLeaf(arg0 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + isRoot(arg0 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + getIncidentCount(arg0 : E) : int </td></tr>
<tr><td align="left" balign="left"> + addEdge(arg0 : E, arg1 : java.util.Collection&lt;?&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + getTrees() : java.util.Collection&lt;edu.uci.ics.jung.graph.Tree&lt;V, E&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + getChildEdges(arg0 : V) : java.util.Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getParentEdge(arg0 : V) : E </td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/edu/uci/ics/jung/graph/DelegateTree.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
}

