#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Trebuchet MS",fontsize=10,labelfontname="Trebuchet MS",labelfontsize=10];
	node [fontname="Trebuchet MS",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// broadwick.stochastic.algorithms.TauLeapingFixedStep
	c5688 [label=<<table title="broadwick.stochastic.algorithms.TauLeapingFixedStep" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./TauLeapingFixedStep.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> TauLeapingFixedStep </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - tau : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + TauLeapingFixedStep(amountManager : AmountManager, transitionKernel : TransitionKernel, tau : int) </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + performStep() </td></tr>
<tr><td align="left" balign="left"> + setRngSeed(seed : int) </td></tr>
<tr><td align="left" balign="left"> + reinitialize() </td></tr>
		</table></td></tr>
		</table>>, URL="./TauLeapingFixedStep.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.stochastic.algorithms.TauLeaping
	c5689 [label=<<table title="broadwick.stochastic.algorithms.TauLeaping" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./TauLeaping.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> TauLeaping </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + TauLeaping(amountManager : AmountManager, transitionKernel : TransitionKernel) </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> + setRngSeed(seed : int) </td></tr>
<tr><td align="left" balign="left"> + reinitialize() </td></tr>
<tr><td align="left" balign="left"> + performStep() </td></tr>
<tr><td align="left" balign="left"> - calculateRTotal() : double </td></tr>
		</table></td></tr>
		</table>>, URL="./TauLeaping.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.stochastic.algorithms.AbstractTauLeapingBase
	c5691 [label=<<table title="broadwick.stochastic.algorithms.AbstractTauLeapingBase" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./AbstractTauLeapingBase.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> AbstractTauLeapingBase </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # GENERATOR : RNG </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + AbstractTauLeapingBase(amountManager : AmountManager, transitionKernel : TransitionKernel) </td></tr>
<tr><td align="left" balign="left"> # updateStates(tau : double) </td></tr>
<tr><td align="left" balign="left"> # isThetaEventInCurrentStep(tau : double) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./AbstractTauLeapingBase.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.stochastic.StochasticSimulator
	c5693 [label=<<table title="broadwick.stochastic.StochasticSimulator" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../StochasticSimulator.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> StochasticSimulator </font></td></tr>
<tr><td align="center" balign="center"><font face="Trebuchet MS" point-size="7.0"> broadwick.stochastic </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - startTime : int </td></tr>
<tr><td align="left" balign="left"> - transitionKernel : broadwick.stochastic.TransitionKernel </td></tr>
<tr><td align="left" balign="left"> - amountManager : broadwick.stochastic.AmountManager </td></tr>
<tr><td align="left" balign="left"> - currentTime : double </td></tr>
<tr><td align="left" balign="left"> - controller : broadwick.stochastic.SimulationController </td></tr>
<tr><td align="left" balign="left"> - thetaQueue : broadwick.stochastic.StochasticSimulator.ThetaQueue </td></tr>
<tr><td align="left" balign="left"> - observers : java.util.Set&lt;broadwick.stochastic.Observer&gt; </td></tr>
<tr><td align="left" balign="left"> # reverseTime : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + StochasticSimulator(amountManager : broadwick.stochastic.AmountManager, transitionKernel : broadwick.stochastic.TransitionKernel) </td></tr>
<tr><td align="left" balign="left"> + StochasticSimulator(amountManager : broadwick.stochastic.AmountManager, transitionKernel : broadwick.stochastic.TransitionKernel, reverseTime : boolean) </td></tr>
<tr><td align="left" balign="left"> + run(time : double) </td></tr>
<tr><td align="left" balign="left"> + run() </td></tr>
<tr><td align="left" balign="left"> + init() </td></tr>
<tr><td align="left" balign="left"> # doEvent(mu : broadwick.stochastic.SimulationEvent, t : double) </td></tr>
<tr><td align="left" balign="left"> # doEvent(event : broadwick.stochastic.SimulationEvent, t : double, n : int) </td></tr>
<tr><td align="left" balign="left"> # doThetaEvent() </td></tr>
<tr><td align="left" balign="left"> + addObserver(observer : broadwick.stochastic.Observer) </td></tr>
<tr><td align="left" balign="left"> + getNextThetaEventTime() : double </td></tr>
<tr><td align="left" balign="left"> + registerNewTheta(obs : broadwick.stochastic.Observer, thetaTime : double, event : java.lang.Object) </td></tr>
<tr><td align="left" balign="left"> + getDefaultObserver() : broadwick.stochastic.Observer </td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + reinitialize() </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + performStep() </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + getName() : java.lang.String </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + setRngSeed(seed : int) </font></td></tr>
		</table></td></tr>
		</table>>, URL="../StochasticSimulator.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	//broadwick.stochastic.algorithms.TauLeapingFixedStep extends broadwick.stochastic.algorithms.AbstractTauLeapingBase
	c5691:p -> c5688:p [dir=back,arrowtail=empty];
	//broadwick.stochastic.algorithms.TauLeaping extends broadwick.stochastic.algorithms.AbstractTauLeapingBase
	c5691:p -> c5689:p [dir=back,arrowtail=empty];
	//broadwick.stochastic.algorithms.AbstractTauLeapingBase extends broadwick.stochastic.StochasticSimulator
	c5693:p -> c5691:p [dir=back,arrowtail=empty];
}

