#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Trebuchet MS",fontsize=10,labelfontname="Trebuchet MS",labelfontsize=10];
	node [fontname="Trebuchet MS",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// broadwick.graph.UndirectedGraph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c13678 [label=<<table title="broadwick.graph.UndirectedGraph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./UndirectedGraph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> UndirectedGraph&lt;V extends Vertex, E extends Edge&lt;V&gt;&gt; </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - vertexAttributes : Collection&lt;VertexAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> - edgeAttributes : Collection&lt;EdgeAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> - graph : UndirectedSparseMultigraph&lt;V, E&gt; </td></tr>
<tr><td align="left" balign="left"> - vertexmaps : HashMap&lt;String, V&gt; </td></tr>
<tr><td align="left" balign="left"> - edgemaps : HashMap&lt;String, E&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + UndirectedGraph() </td></tr>
<tr><td align="left" balign="left"> + getInEdges(vertex : V) : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getOutEdges(vertex : V) : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getPredecessors(vertex : V) : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + getSuccessors(vertex : V) : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + inDegree(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + outDegree(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + isPredecessor(v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + isSuccessor(v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + getPredecessorCount(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + getSuccessorCount(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + getSource(directedEdge : E) : V </td></tr>
<tr><td align="left" balign="left"> + getDest(directedEdge : E) : V </td></tr>
<tr><td align="left" balign="left"> + isSource(vertex : V, edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + isDest(vertex : V, edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + addVertex(vertex : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + addEdge(e : E, v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + addEdge(e : E, v1 : V, v2 : V, edgeType : EdgeType) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEndpoints(edge : E) : Pair&lt;V, V&gt; </td></tr>
<tr><td align="left" balign="left"> + getOpposite(vertex : V, edge : E) : V </td></tr>
<tr><td align="left" balign="left"> + getVertexCount() : int </td></tr>
<tr><td align="left" balign="left"> + getVertices() : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + getVertex(id : String) : V </td></tr>
<tr><td align="left" balign="left"> + getEdge(id : String) : E </td></tr>
<tr><td align="left" balign="left"> + getEdges() : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + removeVertex(vertex : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + removeEdge(edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEdgeType() : EdgeType </td></tr>
<tr><td align="left" balign="left"> + addVertexAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </td></tr>
<tr><td align="left" balign="left"> + addEdgeAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </td></tr>
<tr><td align="left" balign="left"> # finalize() </td></tr>
		</table></td></tr>
		</table>>, URL="./UndirectedGraph.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.graph.Tree<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c13679 [label=<<table title="broadwick.graph.Tree" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Tree.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> Tree&lt;V extends Vertex, E extends Edge&lt;V&gt;&gt; </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - vertexAttributes : Collection&lt;VertexAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> - edgeAttributes : Collection&lt;EdgeAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> - tree : DelegateTree&lt;V, E&gt; </td></tr>
<tr><td align="left" balign="left"> - vertexmaps : HashMap&lt;String, V&gt; </td></tr>
<tr><td align="left" balign="left"> - edgemaps : HashMap&lt;String, E&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Tree() </td></tr>
<tr><td align="left" balign="left"> + getRoot() : V </td></tr>
<tr><td align="left" balign="left"> + getHeight() : int </td></tr>
<tr><td align="left" balign="left"> + getDepth(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + addVertex(vertex : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + getSubTree(vertex : V) : Tree&lt;V, E&gt; </td></tr>
<tr><td align="left" balign="left"> + getInEdges(vertex : V) : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getOutEdges(vertex : V) : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getPredecessors(vertex : V) : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + getSuccessors(vertex : V) : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + inDegree(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + outDegree(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + isPredecessor(v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + isSuccessor(v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + getPredecessorCount(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + getSuccessorCount(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + getSource(directedEdge : E) : V </td></tr>
<tr><td align="left" balign="left"> + getDest(directedEdge : E) : V </td></tr>
<tr><td align="left" balign="left"> + isSource(vertex : V, edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + isDest(vertex : V, edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + addEdge(e : E, v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + addEdge(e : E, v1 : V, v2 : V, edgeType : EdgeType) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEndpoints(edge : E) : Pair&lt;V, V&gt; </td></tr>
<tr><td align="left" balign="left"> + getOpposite(vertex : V, edge : E) : V </td></tr>
<tr><td align="left" balign="left"> + getVertexCount() : int </td></tr>
<tr><td align="left" balign="left"> + getVertex(id : String) : V </td></tr>
<tr><td align="left" balign="left"> + getVertices() : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdge(id : String) : E </td></tr>
<tr><td align="left" balign="left"> + getEdges() : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getPredecessor(vertex : V) : V </td></tr>
<tr><td align="left" balign="left"> + removeVertex(vertex : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + removeEdge(edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + addSubtree(subtree : Tree&lt;V, E&gt;, node : V, connectingEdge : E) </td></tr>
<tr><td align="left" balign="left"> + getEdgeType() : EdgeType </td></tr>
<tr><td align="left" balign="left"> + addVertexAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </td></tr>
<tr><td align="left" balign="left"> + addEdgeAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </td></tr>
<tr><td align="left" balign="left"> # finalize() </td></tr>
		</table></td></tr>
		</table>>, URL="./Tree.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.graph.Graph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c13680 [label=<<table title="broadwick.graph.Graph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./Graph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"><font face="Trebuchet MS"> Graph&lt;V extends Vertex, E extends Edge&lt;V&gt;&gt; </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + getInEdges(vertex : V) : Collection&lt;E&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + getOutEdges(vertex : V) : Collection&lt;E&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + getPredecessors(vertex : V) : Collection&lt;V&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + getSuccessors(vertex : V) : Collection&lt;V&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + inDegree(vertex : V) : int </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + outDegree(vertex : V) : int </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + isPredecessor(v1 : V, v2 : V) : boolean </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + isSuccessor(v1 : V, v2 : V) : boolean </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + getPredecessorCount(vertex : V) : int </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + getSuccessorCount(vertex : V) : int </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + getSource(directedEdge : E) : V </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + getDest(directedEdge : E) : V </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + isSource(vertex : V, edge : E) : boolean </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + isDest(vertex : V, edge : E) : boolean </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + addVertex(vertex : V) : boolean </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + addEdge(e : E, v1 : V, v2 : V) : boolean </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + addEdge(e : E, v1 : V, v2 : V, edgeType : EdgeType) : boolean </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + getEndpoints(edge : E) : Pair&lt;V, V&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + getOpposite(vertex : V, edge : E) : V </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + getVertexCount() : int </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + getVertices() : Collection&lt;V&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + getVertex(id : String) : V </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + getEdge(id : String) : E </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + getEdges() : Collection&lt;E&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + removeVertex(vertex : V) : boolean </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + removeEdge(edge : E) : boolean </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + getVertexAttributes() : Collection&lt;VertexAttribute&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + getEdgeAttributes() : Collection&lt;EdgeAttribute&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + addVertexAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + addEdgeAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + getEdgeType() : EdgeType </font></td></tr>
		</table></td></tr>
		</table>>, URL="./Graph.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.graph.DirectedGraph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c13684 [label=<<table title="broadwick.graph.DirectedGraph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DirectedGraph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> DirectedGraph&lt;V extends Vertex, E extends Edge&lt;V&gt;&gt; </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - vertexAttributes : Collection&lt;VertexAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> - edgeAttributes : Collection&lt;EdgeAttribute&gt; </td></tr>
<tr><td align="left" balign="left"> - graph : DirectedSparseMultigraph&lt;V, E&gt; </td></tr>
<tr><td align="left" balign="left"> - vertexmaps : HashMap&lt;String, V&gt; </td></tr>
<tr><td align="left" balign="left"> - edgemaps : HashMap&lt;String, E&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DirectedGraph() </td></tr>
<tr><td align="left" balign="left"> + getInEdges(vertex : V) : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getOutEdges(vertex : V) : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + getPredecessors(vertex : V) : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + getSuccessors(vertex : V) : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + inDegree(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + outDegree(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + isPredecessor(v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + isSuccessor(v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + getPredecessorCount(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + getSuccessorCount(vertex : V) : int </td></tr>
<tr><td align="left" balign="left"> + getSource(directedEdge : E) : V </td></tr>
<tr><td align="left" balign="left"> + getDest(directedEdge : E) : V </td></tr>
<tr><td align="left" balign="left"> + isSource(vertex : V, edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + isDest(vertex : V, edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + addVertex(vertex : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + addEdge(e : E, v1 : V, v2 : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + addEdge(e : E, v1 : V, v2 : V, edgeType : EdgeType) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEndpoints(edge : E) : Pair&lt;V, V&gt; </td></tr>
<tr><td align="left" balign="left"> + getOpposite(vertex : V, edge : E) : V </td></tr>
<tr><td align="left" balign="left"> + getVertexCount() : int </td></tr>
<tr><td align="left" balign="left"> + getVertices() : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + getVertex(id : String) : V </td></tr>
<tr><td align="left" balign="left"> + getEdge(id : String) : E </td></tr>
<tr><td align="left" balign="left"> + getEdges() : Collection&lt;E&gt; </td></tr>
<tr><td align="left" balign="left"> + removeVertex(vertex : V) : boolean </td></tr>
<tr><td align="left" balign="left"> + removeEdge(edge : E) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEdgeType() : EdgeType </td></tr>
<tr><td align="left" balign="left"> + addVertexAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </td></tr>
<tr><td align="left" balign="left"> + addEdgeAttribute(name : String, type : Class&lt;&gt;, defaultValue : String) </td></tr>
<tr><td align="left" balign="left"> # finalize() </td></tr>
		</table></td></tr>
		</table>>, URL="./DirectedGraph.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.graph.writer.GraphWriter
	c13686 [label=<<table title="broadwick.graph.writer.GraphWriter" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./writer/GraphWriter.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"><font face="Trebuchet MS"> GraphWriter </font></td></tr>
<tr><td align="center" balign="center"><font face="Trebuchet MS" point-size="7.0"> broadwick.graph.writer </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + toString(network : broadwick.graph.Graph&lt;?, ?&gt;) : java.lang.String </font></td></tr>
<tr><td align="left" balign="left"><font face="Trebuchet MS" point-size="9.0"> + save(file : java.lang.String, network : broadwick.graph.Graph&lt;?, ?&gt;) </font></td></tr>
		</table></td></tr>
		</table>>, URL="./writer/GraphWriter.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.graph.writer.GraphViz
	c13687 [label=<<table title="broadwick.graph.writer.GraphViz" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./writer/GraphViz.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> GraphViz </font></td></tr>
<tr><td align="center" balign="center"><font face="Trebuchet MS" point-size="7.0"> broadwick.graph.writer </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - GraphViz() </td></tr>
<tr><td align="left" balign="left"> + toString(network : broadwick.graph.Graph&lt;?, ?&gt;) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + save(file : java.lang.String, network : broadwick.graph.Graph&lt;?, ?&gt;) </td></tr>
		</table></td></tr>
		</table>>, URL="./writer/GraphViz.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.graph.writer.GraphMl
	c13688 [label=<<table title="broadwick.graph.writer.GraphMl" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./writer/GraphMl.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> GraphMl </font></td></tr>
<tr><td align="center" balign="center"><font face="Trebuchet MS" point-size="7.0"> broadwick.graph.writer </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - GraphMl() </td></tr>
<tr><td align="left" balign="left"> + toString(network : broadwick.graph.Graph&lt;?, ?&gt;, directed : boolean) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + toString(network : broadwick.graph.Graph&lt;?, ?&gt;) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + save(file : java.lang.String, network : broadwick.graph.Graph&lt;?, ?&gt;) </td></tr>
<tr><td align="left" balign="left"> - addEdge(edge : broadwick.graph.Edge&lt;&gt;, element : org.jdom2.Element) </td></tr>
<tr><td align="left" balign="left"> - addNode(vertex : broadwick.graph.Vertex, element : org.jdom2.Element) </td></tr>
		</table></td></tr>
		</table>>, URL="./writer/GraphMl.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.graph.writer.EdgeList
	c13689 [label=<<table title="broadwick.graph.writer.EdgeList" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./writer/EdgeList.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> EdgeList </font></td></tr>
<tr><td align="center" balign="center"><font face="Trebuchet MS" point-size="7.0"> broadwick.graph.writer </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - EdgeList() </td></tr>
<tr><td align="left" balign="left"> + toString(network : broadwick.graph.Graph&lt;?, ?&gt;) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + save(file : java.lang.String, network : broadwick.graph.Graph&lt;?, ?&gt;) </td></tr>
		</table></td></tr>
		</table>>, URL="./writer/EdgeList.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	// broadwick.utils.Pair<A, B>
	c13758 [label=<<table title="broadwick.utils.Pair" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../utils/Pair.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Trebuchet MS"> Pair&lt;A, B&gt; </font></td></tr>
<tr><td align="center" balign="center"><font face="Trebuchet MS" point-size="7.0"> broadwick.utils </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - first : A </td></tr>
<tr><td align="left" balign="left"> - second : B </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Pair(first : A, second : B) </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
		</table></td></tr>
		</table>>, URL="../utils/Pair.html", fontname="Trebuchet MS", fontcolor="black", fontsize=9.0];
	//broadwick.graph.UndirectedGraph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> implements broadwick.graph.Graph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c13680:p -> c13678:p [dir=back,arrowtail=empty,style=dashed];
	//broadwick.graph.Tree<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> implements broadwick.graph.Graph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c13680:p -> c13679:p [dir=back,arrowtail=empty,style=dashed];
	//broadwick.graph.DirectedGraph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> implements broadwick.graph.Graph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c13680:p -> c13684:p [dir=back,arrowtail=empty,style=dashed];
	// broadwick.graph.UndirectedGraph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> DEPEND broadwick.utils.Pair<A, B>
	c13678:p -> c13758:p [taillabel="", label="", headlabel="", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// broadwick.graph.Tree<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> DEPEND broadwick.utils.Pair<A, B>
	c13679:p -> c13758:p [taillabel="", label="", headlabel="", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// broadwick.graph.Graph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> DEPEND broadwick.utils.Pair<A, B>
	c13680:p -> c13758:p [taillabel="", label="", headlabel="", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// broadwick.graph.DirectedGraph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>> DEPEND broadwick.utils.Pair<A, B>
	c13684:p -> c13758:p [taillabel="", label="", headlabel="", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// broadwick.graph.writer.GraphWriter DEPEND broadwick.graph.Graph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c13686:p -> c13680:p [taillabel="", label="", headlabel="", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// broadwick.graph.writer.GraphWriter DEPEND broadwick.graph.Graph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c13686:p -> c13680:p [taillabel="", label="", headlabel="", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// broadwick.graph.writer.GraphViz DEPEND broadwick.graph.Graph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c13687:p -> c13680:p [taillabel="", label="", headlabel="", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// broadwick.graph.writer.GraphViz DEPEND broadwick.graph.Graph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c13687:p -> c13680:p [taillabel="", label="", headlabel="", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// broadwick.graph.writer.GraphMl DEPEND broadwick.graph.Graph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c13688:p -> c13680:p [taillabel="", label="", headlabel="", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// broadwick.graph.writer.GraphMl DEPEND broadwick.graph.Graph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c13688:p -> c13680:p [taillabel="", label="", headlabel="", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// broadwick.graph.writer.GraphMl DEPEND broadwick.graph.Graph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c13688:p -> c13680:p [taillabel="", label="", headlabel="", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// broadwick.graph.writer.EdgeList DEPEND broadwick.graph.Graph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c13689:p -> c13680:p [taillabel="", label="", headlabel="", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// broadwick.graph.writer.EdgeList DEPEND broadwick.graph.Graph<V extends broadwick.graph.Vertex, E extends broadwick.graph.Edge<V>>
	c13689:p -> c13680:p [taillabel="", label="", headlabel="", fontname="Trebuchet MS", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
}

